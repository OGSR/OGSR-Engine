#include "common.h"

// Оригинальный шейдер: https://github.com/ya7gisa0/Unity-Raindrops
// Для OGSR Engine портировал KRodin (c) 2019
// Cleaned up code by LVutner

// x - Сила эффекта от 0 до 1. Рассчитывается в движке. Чем сильнее дождь - тем сильнее эффект. Реализовано плавное уменьшение/увеличение силы эффекта при входе/выходе из помещения в дождь.
// y - Интенсивность эффекта. Чем больше - тем более "ярко выраженнее" будут капли. Регулируется консольной командой r2_rain_drops_intensity
// z - Скорость стекания капель. Чем больше - тем быстрее. Регулируется консольной командой r2_rain_drops_speed
uniform float4 rain_drops_params;


float3 N13(float p) {
   // from DAVE HOSKINS
   float3 p3 = frac(float3(p,p,p) * float3(.1031,.11369,.13787));
   p3 += dot(p3, p3.yzx + 19.19);
   return frac(float3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));
}

float N(float t) {
    return frac(sin(t*12345.564)*7658.76);
}

float Saw(float b, float t) {
    return smoothstep(0., b, t)*smoothstep(1., b, t);
}


float2 DropLayer2(float2 uv, float t) {
    uv.y = 1. - uv.y; //KRodin: переворачиваем картинку, а то капли рендерятся вверх ногами (особенность OpenGL ?)
    float2 UV = uv;

    uv.y += t * rain_drops_params.z;
    float2 a = float2(6., 1.);
    float2 grid = a*2.;
    float2 id = floor(uv*grid);

    float colShift = N(id.x); 
    uv.y += colShift;

    id = floor(uv*grid);
    float3 n = N13(id.x*35.2+id.y*2376.1);
    float2 st = frac(uv*grid)-float2(.5, 0);

    float x = n.x-.5;

    float y = UV.y*20.;
    float wiggle = sin(y+sin(y));
    x += wiggle*(.5-abs(x))*(n.z-.5);
    x *= .7;
    float ti = frac(t+n.z);
    y = (Saw(.85, ti)-.5)*.9+.5;
    float2 p = float2(x, y);

    float d = length((st-p)*a.yx);

    float mainDrop = smoothstep(.4, .0, d);

    float r = sqrt(smoothstep(1., y, st.y));
    float cd = abs(st.x-x);
    float trail = smoothstep(.23*r, .15*r*r, cd);
    float trailFront = smoothstep(-.02, .02, st.y-y);
    trail *= trailFront*r*r;

    y = UV.y;
    float trail2 = smoothstep(.2*r, .0, cd);
    float droplets = max(0., (sin(y*(1.-y)*120.)-st.y))*trail2*trailFront*n.z;
    y = frac(y*10.)+(st.y-.5);
    float dd = length(st-float2(x, y));
    droplets = smoothstep(.3, 0., dd);
    float m = mainDrop+droplets*r*trailFront;

    return float2(m, trail);
}

float StaticDrops(float2 uv, float t) {
    uv *= 40.;

    float2 id = floor(uv);
    uv = frac(uv)-.5;
    float3 n = N13(id.x*107.45+id.y*3543.654);
    float2 p = (n.xy-.5)*.7;
    float d = length(uv-p);

    float fade = Saw(.025, frac(t+n.z));
    float c = smoothstep(.3, 0., d)*frac(n.z*10.)*fade;
    return c;
}

float2 Drops(float2 uv, float t, float l0, float l1, float l2) {
    float s = StaticDrops(uv, t)*l0; 
    float2 m1 = DropLayer2(uv, t)*l1;
    float2 m2 = DropLayer2(uv*1.85, t)*l2;

    float c = s+m1.x+m2.x;
    c = smoothstep(.3, 1., c);

    return float2(c, max(m1.y*l0, m2.y*l1));
}


float4 main ( p_screen _in ) : SV_Target
{
    float rainAmount = rain_drops_params.x;

    float2 uv = _in.tc0;
    float2 UV = uv;

    float T = timers.x + rainAmount * 2.;    

    float t = T*.2;

    //float staticDrops = smoothstep(-.5, 1., rainAmount)*2.;
    //float layer1 = smoothstep(.25, .75, rainAmount);
    //float layer2 = smoothstep(.0, .5, rainAmount);

    //Dsh: Попытался сделать меньше капель
    float staticDrops = smoothstep(-.5, 1., rainAmount);
    float layer1 = smoothstep(.25, .75, rainAmount)*.5;
    float layer2 = smoothstep(.0, .5, rainAmount)*.5;

    float2 c = Drops(uv, t, staticDrops, layer1, layer2);
    float2 e = float2(rain_drops_params.y, 0.);
    float cx = Drops(uv+e, t, staticDrops, layer1, layer2).x;
    float cy = Drops(uv+e.yx, t, staticDrops, layer1, layer2).x;
    float2 n = float2(cx-c.x, cy-c.x); // expensive normals

    float3 col = s_image.Sample(smp_rtlinear, UV + n);

    return float4(col, 1.);
}
