#include "common.h"
#include "models_detector_cfg.h"

uniform float4x4 ogse_c_artefacts;	// view space artefacts position, xz, two pairs on a row
uniform float4x4 ogse_c_anomalys;	// view space anomalys position, xz, two pairs on a row
uniform float4 ogse_c_detector;
uniform sampler2D s_numbers;

#ifdef USE_WAVE
uniform sampler2D s_wave;
#endif

#define NUMBERS_SIZE float2(1.0000,0.0996)	// size of numbers block

float calculate_bright	(float2 pos, float2 tc, float dot_radius)
{
	float res;
	float2 art_tc;
	float4 scr_corners = ID_DETECTOR_3_SCREEN_CORNERS;
	art_tc.x = scr_corners.x + (scr_corners.y - scr_corners.x) * (pos.x + ID_DETECTOR_3_DETECT_RADIUS) / (2 * ID_DETECTOR_3_DETECT_RADIUS);
	art_tc.y = scr_corners.z + (scr_corners.w - scr_corners.z) * (ID_DETECTOR_3_DETECT_RADIUS - pos.y) / ID_DETECTOR_3_DETECT_RADIUS;
	float2 vec = tc - art_tc;
	res = step(length(vec), dot_radius) * step(0.001, length(pos));
	return res;
}

float4  main  ( p_flat I )  : COLOR
{
	float bright = calculate_bright(float2(ogse_c_artefacts._11, ogse_c_artefacts._21), I.tcdh.xy, ID_DETECTOR_3_DOT_RADIUS);
	bright += calculate_bright(float2(ogse_c_artefacts._31, ogse_c_artefacts._41), I.tcdh.xy, ID_DETECTOR_3_DOT_RADIUS);
	bright += calculate_bright(float2(ogse_c_artefacts._12, ogse_c_artefacts._22), I.tcdh.xy, ID_DETECTOR_3_DOT_RADIUS);
	bright += calculate_bright(float2(ogse_c_artefacts._32, ogse_c_artefacts._42), I.tcdh.xy, ID_DETECTOR_3_DOT_RADIUS);
	bright += calculate_bright(float2(ogse_c_artefacts._13, ogse_c_artefacts._23), I.tcdh.xy, ID_DETECTOR_3_DOT_RADIUS);
	bright += calculate_bright(float2(ogse_c_artefacts._33, ogse_c_artefacts._43), I.tcdh.xy, ID_DETECTOR_3_DOT_RADIUS);
	bright += calculate_bright(float2(ogse_c_artefacts._14, ogse_c_artefacts._24), I.tcdh.xy, ID_DETECTOR_3_DOT_RADIUS);
	bright += calculate_bright(float2(ogse_c_artefacts._34, ogse_c_artefacts._44), I.tcdh.xy, ID_DETECTOR_3_DOT_RADIUS);

	float4 color = lerp(float4(0,0,0,0), ID_DETECTOR_3_COLOR, saturate(bright));

#ifdef USE_WAVE
	float wave = tex2D(s_wave, float2(I.tcdh.y + timers.x*0.3, I.tcdh.x)*3).x;

	//color += wave * ID_DETECTOR_3_DOT_COLOR;
	color += wave * ID_DETECTOR_3_COLOR;
#endif

#ifdef USE_ANOMALY_DETECTION
	float an_bright = calculate_bright(float2(ogse_c_anomalys._11, ogse_c_anomalys._21), I.tcdh.xy, ID_DETECTOR_3_AN_DOT_RADIUS);
	an_bright += calculate_bright(float2(ogse_c_anomalys._31, ogse_c_anomalys._41), I.tcdh.xy, ID_DETECTOR_3_AN_DOT_RADIUS);
	an_bright += calculate_bright(float2(ogse_c_anomalys._12, ogse_c_anomalys._22), I.tcdh.xy, ID_DETECTOR_3_AN_DOT_RADIUS);
	an_bright += calculate_bright(float2(ogse_c_anomalys._32, ogse_c_anomalys._42), I.tcdh.xy, ID_DETECTOR_3_AN_DOT_RADIUS);
	an_bright += calculate_bright(float2(ogse_c_anomalys._13, ogse_c_anomalys._23), I.tcdh.xy, ID_DETECTOR_3_AN_DOT_RADIUS);
	an_bright += calculate_bright(float2(ogse_c_anomalys._33, ogse_c_anomalys._43), I.tcdh.xy, ID_DETECTOR_3_AN_DOT_RADIUS);
	an_bright += calculate_bright(float2(ogse_c_anomalys._14, ogse_c_anomalys._24), I.tcdh.xy, ID_DETECTOR_3_AN_DOT_RADIUS);
	an_bright += calculate_bright(float2(ogse_c_anomalys._34, ogse_c_anomalys._44), I.tcdh.xy, ID_DETECTOR_3_AN_DOT_RADIUS);

	color += lerp(float4(0,0,0,0), ID_DETECTOR_3_AN_COLOR, saturate(an_bright));
#endif
	color = saturate(color);
	// strange zone detector upgrade
	float4 scr_corners = ID_DETECTOR_3_SCREEN_CORNERS;
	float2 num_tc = {0.f,0.f};
	num_tc = clamp(I.tcdh.xy, scr_corners.xz, scr_corners.yw);
	num_tc.x = (num_tc.x - scr_corners.x)/(scr_corners.y - scr_corners.x)*NUMBERS_SIZE.x;
	num_tc.y = (num_tc.y - scr_corners.z)/(scr_corners.w - scr_corners.z)*NUMBERS_SIZE.y;

	num_tc.y += NUMBERS_SIZE.y*ogse_c_detector.y;

	float4 up_color = tex2D(s_numbers, num_tc).aaaa*ID_DETECTOR_3_NUM_COLOR;
	color = lerp(color, up_color, ogse_c_detector.x);

	return saturate(color)*ID_DETECTOR_3_POWER;
}
