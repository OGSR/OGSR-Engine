-- Меню настроек для Теней Чернобыля.
-- KRodin (c) 2018
-- Вырезал поддержку загрузки патчей, первого рендера (т.к. он не поддерживается движком) и прочий мусор.
-- Сделано специально для использования с движком OGSR.

class "options_dialog" (CUIScriptWnd)
function options_dialog:__init() super()
	self:SetFont(GetFontMedium())

	self.hint_name = nil
	self.hint_caption = nil
	self.current_view = nil

	self:InitControls()
	self:InitCallBacks()
	self:UpdateOptValues()
end

function options_dialog:__finalize()
	--log1("--options_dialog:__finalize() called!")
end

function options_dialog:InitControls()
	self:Init(0,0,1024,768)
	self:Enable(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_opt.xml")

	xml:InitStatic("back_video", self)
	xml:InitStatic("background", self)
	xml:InitStatic("rug_video", self)
	self.dialog = xml:InitStatic("main_dialog:dialog", self)

	xml:InitFrame("frame_hint", self)
	self.hint_name = xml:InitStatic("hint_name", self)
	self.hint_caption = xml:InitStatic("hint_caption", self)	
	self.current_view = 1

	xml:InitStatic("main_dialog:cap_options", self.dialog)

	self.dlg_video = ui_mm_opt_video.opt_video()
	self.dlg_video:InitControls(55, 74, xml, self)
	self.dialog:AttachChild(self.dlg_video)

	self.dlg_sound = ui_mm_opt_sound.opt_sound()
	self.dlg_sound:InitControls(55, 74, xml, self)
	self.dlg_sound:Show(false)
	self.dialog:AttachChild(self.dlg_sound)

	self.dlg_gameplay = ui_mm_opt_gameplay.opt_gameplay()
	self.dlg_gameplay:InitControls(55, 74, xml, self)
	self.dlg_gameplay:Show(false)
	self.dialog:AttachChild(self.dlg_gameplay)

	self.dlg_controls = ui_mm_opt_controls.opt_controls()
	self.dlg_controls:InitControls(55, 74, xml, self)
	self.dlg_controls:Show(false)
	self.dialog:AttachChild(self.dlg_controls)

	self.dlg_video_adv = ui_mm_opt_video_adv.opt_video_adv()
	self.dlg_video_adv:InitControls(55, 74, xml, self)
	self.dlg_video_adv:Show(false)
	self.dialog:AttachChild(self.dlg_video_adv)

	local btn = xml:Init3tButton("main_dialog:btn_accept", self.dialog)
	self:Register(btn, "btn_accept")

	btn = xml:Init3tButton("main_dialog:btn_cancel", self.dialog)
	self:Register(btn, "btn_cancel")

	self.tab = xml:InitTab("main_dialog:tab", self.dialog)
	self:Register(self.tab, "tab")

	self.message_box = CUIMessageBoxEx()
	self.message_box:Init("message_box_restart_game")
end

function options_dialog:UpdateOptValues(flag) --true - применить настройки, false - отменить настройки, nil - просто обновить дефолтные значения
	local OptMgr = COptionsManager()
	local opt_tbl = {"mm_opt_video_preset", "mm_opt_video", "mm_opt_video_adv", "mm_opt_gameplay", "mm_opt_sound", "mm_opt_controls", "key_binding"}
	for _, opt_name in ipairs(opt_tbl) do
		if flag == true then
			OptMgr:SaveValues(opt_name)
		elseif flag == false then
			OptMgr:UndoGroup(opt_name)
		end
	end
	if flag == true then
		OptMgr:OptionsPostAccept()
	end
	for _, opt_name in ipairs(opt_tbl) do
		OptMgr:SetCurrentValues(opt_name)
		OptMgr:SaveBackupValues(opt_name)
	end
end

function options_dialog:InitCallBacks()
	self:AddCallback("tab", ui_events.TAB_CHANGED, self.OnTabChange, self)
	self:AddCallback("btn_advanced_graphic", ui_events.BUTTON_CLICKED, self.OnBtnAdvGraphic, self)
	self:AddCallback("btn_accept", ui_events.BUTTON_CLICKED, self.OnBtnAccept, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.OnBtnCancel, self)
	self:AddCallback("combo_preset", ui_events.LIST_ITEM_SELECT, self.OnPresetChanged, self)	
	self:AddCallback("btn_simply_graphic", ui_events.BUTTON_CLICKED, self.OnSimplyGraphic, self)	
	self:AddCallback("btn_keyb_default", ui_events.BUTTON_CLICKED, self.Onbtn_keyb_default, self)
	self:AddCallback("btn_advanced_graphic", ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("btn_accept",           ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("btn_cancel",           ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("btn_default_graphic",  ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("btn_default_sound",    ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
	self:AddCallback("btn_simply_graphic",   ui_events.STATIC_FOCUS_RECEIVED, self.HintRefresh, self)
end

function options_dialog:HintRefresh()
	self.hint_name:SetText(game.translate_string("hint_name_text"))
	if self.current_view == 1 then
		self.hint_caption:SetText(game.translate_string("hint_caption_text"))
	else
		self.hint_caption:SetText(game.translate_string("hint_caption_adv_text"))
	end
end

function options_dialog:Onbtn_keyb_default()
	cmd("unbindall")

	local opt = COptionsManager()
	opt:SetCurrentValues("mm_opt_controls")
	opt:SetCurrentValues("key_binding")
end

function options_dialog:OnPresetChanged()
	local opt = COptionsManager()
	opt:SetCurrentValues("mm_opt_video")
	opt:SetCurrentValues("mm_opt_video_adv")

	self:show_need_restart_wnd()
end

function options_dialog:OnBtnAccept()
	self:UpdateOptValues(true)

	self:GetHolder():start_stop_menu(self, true)
	self.owner:Show(true)

	self:HintRefresh()

	cmd("cfg_save") -- сохраняем файл настроек на диск
end

function options_dialog:OnBtnCancel()
	self:UpdateOptValues(false)

	self:GetHolder():start_stop_menu(self, true)
	self.owner:Show(true)

	self:HintRefresh()
end

function options_dialog:OnTabChange()
	self.dlg_video:Show(false)
	self.dlg_sound:Show(false)
	self.dlg_gameplay:Show(false)
	self.dlg_controls:Show(false)
	self.dlg_video_adv:Show(false)
	self.current_view = 1

	self:HintRefresh()

	local i = self.tab:GetActiveIndex()
	if i == 0 then
		self.dlg_video:Show(true)		
	elseif i == 1 then
		self.dlg_sound:Show(true)
	elseif i == 2 then
		self.dlg_gameplay:Show(true)
	elseif i == 3 then
		self.dlg_controls:Show(true)
	end
end

function options_dialog:OnBtnAdvGraphic()
	self.dlg_video:Show(false)
	self.dlg_video_adv:Show(true)

	self.current_view = 2
	self:HintRefresh()
end

function options_dialog:OnSimplyGraphic()
	self.dlg_video:Show(true)
	self.dlg_video_adv:Show(false)

	self.current_view = 1
	self:HintRefresh()
end

function options_dialog:OnKeyboard(dik, keyboard_action)
	if CUIScriptWnd.OnKeyboard( self, dik, keyboard_action ) then
		return true
	end
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik_to_bind(dik) == key_bindings.kQUIT then
			if self.dlg_video_adv:IsShown() then
				self.dlg_video_adv:Show(false)
				self.dlg_video:Show(true)
				self.current_view = 1
			else
				self:GetHolder():start_stop_menu(self, true)
				self.owner:Show(true)
			end
			self:HintRefresh()
		end
		return true
	end

	return false
end

function options_dialog:show_need_restart_wnd()
	self:GetHolder():start_stop_menu(self.message_box, true)
end
